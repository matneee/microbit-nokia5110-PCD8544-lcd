#Author - @matneee 20 Apr 2017
from microbit import *
import array
import gc

LInit = bytearray(b'\x21\xBF\x04\x14\x0C\x20\x0C')
spi.init(baudrate = 328125, sclk = pin13, mosi = pin15)
framebuffer = [
bytearray(84),
bytearray(84),
bytearray(84),
bytearray(84),
bytearray(84),
bytearray(84)
]

pics = [
bytearray(b'\xff\xff\xff\xff\xff\xff\xff\xff\xf7\xff\xff\xff\xff\xff\xff\x7f\x7f\x7f\x3f\x3f\x9f\x0f\xcf\x0f\xa7\x03\x13\x49\xc1\x29\x54\x80\x34\xc8\x21\x89\x33\x43\x27\x47\x0f\x4f\xdf\xff\xff\xff\xff\xff\x00\x00\xc8\x14\xa0\x0c\x00\xf0\x70\xd0\xc0\xfc\x00\xd4\x20\x8c\x30\x44\x90\x4c\x30\x44\x90\x0c\x00\xf0\xf0\xd0\xec\x70\x8c\x30\xc4\x10\x4c\xb0'),
bytearray(b'\xff\xff\x3f\x1f\x9f\x1f\x4f\x8f\x07\xa3\x93\x23\xc9\x11\x44\xf0\x72\x08\x53\xa4\x08\x6c\x0e\xd1\x2c\x83\xb9\x7d\x13\xc8\xfd\xfa\xa8\xe2\x6d\xd0\xc5\x92\x2d\x40\x9b\x00\xff\xff\xff\x7f\x3f\x3f\x00\x00\x4c\x91\x24\xcb\x20\x8e\x31\x45\x92\x24\xc9\x12\xa8\xab\x7c\x11\xcc\xfb\xf8\xb5\xe2\x6c\xc1\xda\x05\xd1\x2c\x83\x28\x56\x80\x35\x4a\xa8'),
bytearray(b'\xff\xff\x00\x00\x32\xcd\x10\xa5\x5a\xf3\xab\x32\xd4\xf9\x62\xe8\xd3\xa4\x09\xd2\x25\x48\x93\x24\xca\x30\x87\x2b\x53\x86\x37\x4f\x2e\x4d\x97\x2f\x4d\x2c\xcb\x10\xa6\x00\xff\xff\xdf\x4f\x1f\x7d\x00\x00\x22\xcc\x11\xaa\x54\xf1\x2c\x93\xf0\xfe\x60\xd3\xcc\x83\xbb\x43\x96\x27\x4f\x2e\x5d\x87\x5d\x2f\x48\x95\x22\x54\x89\x52\x24\x4b\x90\x26'),
bytearray(b'\xff\xff\x00\x00\x53\x2c\x42\x58\x05\xd7\xc6\x35\x8f\x2f\x5d\x9f\x2e\x5f\x9b\x5b\x24\x49\x92\x24\x8a\x35\xe0\xed\x52\x68\xe3\xf4\xc9\x92\xc4\x33\x0c\xe1\x0a\x54\xa9\x00\xff\xfd\xfd\xbd\x9d\x9f\x00\x00\x52\x88\x33\x44\x97\x26\x57\x85\x3f\xcf\x1d\xbf\x0e\xff\xfb\x5d\x28\xe3\xf4\xc9\xa2\xcc\x11\x4a\x95\x20\x8d\x32\x48\x93\x24\xc9\x12\xac'),
bytearray(b'\xff\xff\xfe\xff\xff\xff\xfb\xfe\xfd\xfd\xf9\xfe\xd0\xf5\xe8\xea\xdf\xc0\xb4\xc3\x44\xd1\x7a\x04\xd1\x24\x0f\x2d\xce\x1b\xdf\x1f\xba\x3f\xdd\x3f\xb3\x3a\xc3\x14\xaa\x00\xff\xff\xff\xff\xff\xfe\x00\x00\x48\x23\x4c\x91\x24\x0b\xb0\x86\x10\xed\x02\x58\xa3\x0e\xed\x0e\x5b\x9f\x3f\xba\x3f\x5d\x3f\xbb\xb2\xa5\x08\xf5\x02\x54\x89\x32\x44\xa9'),
bytearray(b'\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xef\xff\xff\xff\xff\xff\xfe\xff\xff\xfe\xfb\xfe\xf6\xfc\xfb\xf2\xdb\xf4\xa8\xe3\xe4\xb2\xdc\xf1\xfa\xfc\xfc\xff\xfa\xfe\xff\xff\xff\xff\xff\xff\x80\xe0\xe3\xec\xf1\xe4\xe0\xef\xf7\xff\xec\xe7\xe8\xe3\xec\xf2\xe4\xe9\xe2\xec\xf1\xe4\xe9\xf0\xe0\xef\xf7\xfd\xef\xe7\xf2\xed\xe0\xf5\xea\xe0'),
bytearray(b'\x44\x10\xcc\x10\x64\x08\x20\xf0\xf0\xd0\xfc\x00\xd4\x20\x8c\x30\xc4\x10\x4c\x30\xc4\x10\x4c\x30\xc4\x10\x4c\x30\xc4\x10\x4c\x30\xc4\x10\x4c\x30\xc4\x10\x4c\x30\xc4\x10\x4c\x30\xc4\x10\xac\x00\x78\x01\xc9\x33\x83\x27\xc7\x0f\x4f\xdf\xff\xff\xff\xff\xf7\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'),
bytearray(b'\xbb\x78\x12\xcd\xf8\xbb\xf4\xe1\x4d\xd1\xa4\xc9\x12\xac\x01\xfa\x00\x4f\x30\x45\xa8\xfb\x5c\x41\xdc\xfb\xb4\xf1\x64\xd3\xcc\x91\x44\xb3\x0c\xa1\x54\x0b\xd4\x21\x8c\xbb\x78\x15\xca\xf8\xfb\xb4\xe9\x62\xd8\xa3\xcc\x12\xc8\x33\x84\x7f\x3f\x3f\x3f\x7f\x7f\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'),
bytearray(b'\x0b\x63\x0b\x66\x87\x2e\x0f\x6f\x0f\x2d\xce\x28\x05\x2a\x40\x2a\x85\x28\x03\x2c\x42\x2b\x83\x27\x06\x2f\x4e\x2d\x87\x2f\x0d\x2c\x4b\x20\x0e\x20\x45\x2a\x40\x2b\x04\x2b\x43\x2b\x46\xa7\x0f\x2e\x4d\x27\x4d\xaf\x08\x2e\x40\x25\x4a\xa0\x0e\x20\x4a\xb2\x48\x92\x24\x88\x31\xc3\x13\xa7\x07\xe7\x4f\xff\xff\xff\xfe\xff\xff\xff\xff\xff\xfb\xff'),
bytearray(b'\xe4\xf5\x44\x35\xe4\x76\xc4\x95\x24\x55\x84\x36\x44\x95\x24\xd5\x04\xb6\x44\x15\xe4\xf5\x44\x76\xa4\xf5\xc4\xb5\x84\x56\x24\x55\x84\x35\x44\x96\x24\x55\x84\x35\xc4\xb6\xe4\x55\x26\xf4\xe4\xf6\x84\xd5\x26\x54\x86\x34\x44\x97\x24\xd6\xc4\xf4\xc5\xd2\x64\xeb\xe0\xfe\xf0\xfb\xec\xfa\xfc\xff\xf9\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'),
bytearray(b'\x0f\xef\x0a\x5d\x9f\x3b\x3f\xbf\x9d\x37\xf3\x84\x3b\xc0\x16\x48\x95\x20\x8d\x30\xcb\x2f\x8e\x2b\xdd\x1f\xbb\x3f\xdd\x3f\xb7\x33\xc4\x19\x42\xb4\x09\xe2\x0c\x51\xa4\x0f\xed\x0e\x5b\x9f\x3f\xba\x3f\xdd\x37\xbb\x32\x45\x92\x2c\x41\xff\xfe\xff\xfe\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'),
bytearray(b'\xf6\xe8\xe3\xf4\xe9\xe0\xf1\xef\xf7\xfd\xef\xf0\xe6\xf0\xed\xe2\xe8\xe3\xec\xe2\xe8\xe3\xec\xe2\xe8\xf3\xe4\xea\xe0\xeb\xf4\xe2\xf4\xe9\xe2\xec\xf2\xe4\xe9\xf2\xe4\xf2\xec\xe1\xea\xf0\xe7\xe8\xb2\xd4\xf9\xf8\xff\xf4\xfe\xfb\xfe\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xdf\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff')
]

gc.collect()

def LWrt(dc, data):
    pin8.write_digital(dc)
    pin1.write_digital(0)
    spi.write(data)
    pin1.write_digital(1)
    return
      
def LGraph(graph):
    LWrt(1,graph)
    return
    
def LCommand(value):
    LWrt(0,value)
    return
 
def LSetY(y):
    val = bytearray()
    val.append (0x40 + y)
    LCommand(val)
    return
    
def LSetX(x):
    val = bytearray()
    val.append (0x80 + x)
    LCommand(val)
    return

def LSetXY(x, y):
    LSetX(x)
    LSetY(y)
    return

pin0.write_digital(0)
pin0.write_digital(1)
LCommand(LInit)

def ScrollR(s):
    for i in range (0, 84, s):
        LSetXY(0,0)
        for b in range (0, 6):
            fb= bytearray(83-i)
            pic= pics[b]
            fb = pic[i:84]
            pic = pics[b+6]
            fb.extend (pic[0:i])
            framebuffer[b] = fb
        LGraph(framebuffer[0])
        LGraph(framebuffer[1])
        LGraph(framebuffer[2])
        LGraph(framebuffer[3])
        LGraph(framebuffer[4])
        LGraph(framebuffer[5])
        sleep(25)
        gc.collect()


def ScrollL(s):
    for i in range (0, 84, s):
        LSetXY(0,0)
        for b in range (0, 6):
            fb = bytearray(i)
            pic = pics[b]
            fb =pic[83-i:83]
            pic = pics[b+6]
            fb.extend (pic[0:84-i])
            framebuffer[b] = fb
        LGraph(framebuffer[0])
        LGraph(framebuffer[1])
        LGraph(framebuffer[2])
        LGraph(framebuffer[3])
        LGraph(framebuffer[4])
        LGraph(framebuffer[5])
        sleep(25)
        gc.collect()

while True:
        for i in range(0, 10):
            ScrollR(i)
            ScrollL(i)
